name: Kiwaku CI
on:
  pull_request:
    branches:
      - main

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  integration:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cfg:
        - {test: Installation       , mode: 0 }
        - {test: FetchContents      , mode: 1 }
        - {test: CPM                , mode: 2 }
    steps:
      - name: Fetch current branch
        uses: actions/checkout@v3
      - name: Check KIWAKU works with ${{ matrix.cfg.test }}
        uses: ./.github/actions/integration
        with:
          branch: '${{ github.head_ref }}'
          mode: '${{ matrix.cfg.mode }}'

  gcc-linux:
    runs-on: [ubuntu-latest]
    strategy:
      fail-fast: false
      matrix:
        cfg:
        - { opts: -O0                   }
        - { opts: -Ofast -flto -DNDEBUG }
    steps:
      - name: Fetch current branch
        uses: actions/checkout@v3
      - name: Kiwaku using g++-12 with ${{ matrix.cfg.opts }}
        uses: ./.github/actions/run_docker
        with:
          compiler:       'g++-12'
          options:        '${{ matrix.cfg.opts }}'
          linker_options: ''
          cpu:            2

  clang-linux:
    runs-on: [ubuntu-latest]
    strategy:
      fail-fast: false
      matrix:
        cfg:
        - { opts: -O0                                   , linker:                }
        - { opts: "-Ofast -flto -DNDEBUG"               , linker:                }
        - { opts: "-Ofast -flto -DNDEBUG -stdlib=libc++", linker: -stdlib=libc++ }
        - { opts: "-O0 -stdlib=libc++"                  , linker: -stdlib=libc++ }
    steps:
      - name: Fetch current branch
        uses: actions/checkout@v3
      - name: Kiwaku using clang++ with ${{ matrix.cfg.opts }}
        uses: ./.github/actions/run_docker
        with:
          compiler:       'clang++'
          options:        '${{ matrix.cfg.opts }}'
          linker_options: '${{ matrix.cfg.linker }}'
          cpu:            2

  clang-macosx:
    runs-on: [macos-12]
    strategy:
      fail-fast: false
      matrix:
        cfg:
        - { opts: -O0                                   , linker:                 }
        - { opts: "-O0 -stdlib=libc++"                  , linker: -stdlib=libc++  }
        - { opts: "-Ofast -flto -DNDEBUG"               , linker:                 }
        - { opts: "-Ofast -flto -DNDEBUG -stdlib=libc++", linker: -stdlib=libc++  }
    steps:
      - name: Fetch current branch
        uses: actions/checkout@v3
      - name: Running CMake for clang++ with ${{ matrix.cfg.opts }}
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS="${{ matrix.cfg.opts }}" -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.cfg.linker }}"
      - name: Compiling Unit Tests
        run:  cd build && make unit -j 2
      - name: Running Unit Tests
        run: cd build && ctest --output-on-failure -j 2

  gcc-macosx:
    runs-on: [macos-11]
    strategy:
      fail-fast: false
      matrix:
        cfg:
        - { opts: -O0                   }
        - { opts: -Ofast -flto -DNDEBUG }
    steps:
      - name: Fetch current branch
        uses: actions/checkout@v3
      - name: Running CMake for g++ with ${{ matrix.cfg.opts }}
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_CXX_COMPILER=g++-11 -DCMAKE_CXX_FLAGS="${{ matrix.cfg.opts }}"
      - name: Compiling Unit Tests
        run:  cd build && make unit -j 2
      - name: Running Unit Tests
        run: cd build && ctest --output-on-failure -j 2

  android:
    runs-on: [macos-12]
    strategy:
      fail-fast: false
      matrix:
        cfg:
        - { opts: -O0                   }
        - { opts: -Ofast -flto -DNDEBUG }
    steps:
      - name: Fetch current branch
        uses: actions/checkout@v3
      - name: Running CMake for g++ with ${{ matrix.cfg.opts }}
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a
      - name: Compiling Unit Tests
        run:  cd build && make unit -j 2
